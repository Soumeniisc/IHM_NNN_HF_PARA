'''root finding broyden method for two non linear equation 
   exact solution of x[0]**2 - x[1]**2 = 9
		     x[0]**3 + x[1] = 129
   exact solution is x[0]=5,x[1]=4
   solution from brouden method is  5.          4.00000001
'''

# here we are allowing one parameter equation which is true fro hubbard model which is ms
import numpy as np
from numpy import linalg as LA
from scipy import *
import os,sys,subprocess

def function(U,x):
	fx = []
	#write x
	#print "U in fn:",U
	l = open("occupation_in.dat","w")
	print >> l, "#U, mu, ms, dn" 
	print >> l, U, U/2.0, x, 0.0
	l.close() 

	#run the command here which read file for x creat file for fx
	IPTA_info = open( "IPTA.dat",'w')
	cmd = "./HF_"
	subprocess.call(cmd,shell=True,stdout=IPTA_info,stderr=IPTA_info)
	IPTA_info.flush()

	#read fx
	L = loadtxt("occupation_out.dat")
	#print "print output",L
	#fx.append(L[4])
	return float(L[2])



def broyden(U,x=1.0,Bx=0.1):
	fx = function(U,x)
	N=0
	while(abs(fx)>0.00001 and N<1000):	
		#print x
		px = -Bx*fx
		tau = 1
		x1 = x + tau*px
		x = x1
		oldfx = fx
		fx = function(U,x1)
		pfx = fx - oldfx
		#print "px,Bx,pfx,px*Bx*pfx",px,Bx,pfx,px*Bx*pfx
		Bx = Bx + ((px - (Bx*pfx))*(px*Bx))/(px*Bx*pfx)
		N = N + 1
		
	return x,Bx


U_list = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
#U_list = [0.1]
output = open("delta0.5_t20.0_broyden.dat",'w')
print >> output,"# U,mu,ms1-ms,dn,ntotal,ms"
#print U_list
x = 0.0
Bx = 0.1
for U in U_list:
	x,Bx = broyden(U,x,Bx)
	ms = x
	print "U,mz", U, ms
	L = loadtxt("occupation_out.dat")
	print "print output",L
	
	print >> output, L[0],L[1],L[2],L[3],L[4], ms



def broyden3(U,x=[1.0],Bx=np.eye(1)*0.1):
	fx = function(x,U)
	N = 0
	while( LA.norm(fx)>0.00001):	
		#print fx,x
		px = -np.dot(Bx,fx)
		#print 'px',px
		tau = 1
		x1 = x + tau*px
		#print 'x1', 
		x = x1
		oldfx = fx
		fx = function(x1,U)
		#print "fx",fx
		pfx = fx - oldfx
		if(np.dot(np.dot(px,Bx),pfx) !=0.0):
			Bx = Bx + np.tensordot( px - np.dot(Bx,pfx),np.dot(px,Bx),axes=0)/np.dot(np.dot(px,Bx),pfx)
		else:
			print "diverging"
		#print "Bx_after",Bx
		N=N+1
		
	return x
